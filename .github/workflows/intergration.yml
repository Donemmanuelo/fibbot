name: Rust CI

on:
  pull_request:
    branches:
      - main

env:
  CARGO_HOME: ~/.cargo
  CARGO_TARGET_DIR: target

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Ensure Cargo.lock exists
      - name: Check for Cargo.lock
        id: check-lock
        run: |
          if [ ! -f Cargo.lock ]; then
            echo "Cargo.lock not found. Generating it..."
            cargo generate-lockfile
            git add Cargo.lock
            git commit -m "Add Cargo.lock for dependency caching"
            git push
          else
            echo "Cargo.lock exists."
          fi

      # Step 3: Set up Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Step 4: Cache Cargo dependencies
      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.CARGO_HOME }}
            ${{ env.CARGO_TARGET_DIR }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Step 5: Build the project
      - name: Build the project
        run: cargo build --verbose

      # Step 6: Run tests

      # Step 7: Handle pull request (if applicable)
      - name: Fetch pull request details
        if: ${{ github.event_name == 'pull_request' }}
        id: fetch-pr
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # Step 8: Debug pull request details
      - name: Debug pull request
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "Pull Request Details:"
          echo "${{ steps.fetch-pr.outputs.data }}"
